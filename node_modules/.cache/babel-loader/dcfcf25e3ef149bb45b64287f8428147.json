{"ast":null,"code":"import { send, assign } from \"xstate\";\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nconst grammar = {\n  //PERSON\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Olivia\": {\n    person: \"Olivia Smith\"\n  },\n  \"Daniel\": {\n    person: \"Daniel Jones\"\n  },\n  \"James\": {\n    person: \"James Williams\"\n  },\n  \"Mia\": {\n    person: \"Mia Wilson\"\n  },\n  \"Jack\": {\n    person: \"Jack Evans\"\n  },\n  \"Emily\": {\n    person: \"Emily Thomas\"\n  },\n  //DAYS\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesda\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesda\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  //TIMES\n  \"at 1\": {\n    time: \"01:00\"\n  },\n  \"1\": {\n    time: \"01:00\"\n  },\n  \"at 2\": {\n    time: \"02:00\"\n  },\n  \"2\": {\n    time: \"02:00\"\n  },\n  \"at 3\": {\n    time: \"03:00\"\n  },\n  \"t3\": {\n    time: \"03:00\"\n  },\n  \"at 4\": {\n    time: \"04:00\"\n  },\n  \"4\": {\n    time: \"04:00\"\n  },\n  \"at 5\": {\n    time: \"05:00\"\n  },\n  \"5\": {\n    time: \"05:00\"\n  },\n  \"at 6\": {\n    time: \"06:00\"\n  },\n  \"6\": {\n    time: \"06:00\"\n  },\n  \"at 7\": {\n    time: \"07:00\"\n  },\n  \"7\": {\n    time: \"07:00\"\n  },\n  \"at 8\": {\n    time: \"08:00\"\n  },\n  \"8\": {\n    time: \"08:00\"\n  },\n  \"at 9\": {\n    time: \"09:00\"\n  },\n  \"9\": {\n    time: \"09:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  }\n};\nconst BooleanGrammar = {\n  //TRUE\n  \"yes\": {\n    clarity: true\n  },\n  \"of course\": {\n    clarity: true\n  },\n  \"alright\": {\n    clarity: true\n  },\n  \"very well\": {\n    clarity: true\n  },\n  \"sure\": {\n    clarity: true\n  },\n  \"agreed\": {\n    clarity: true\n  },\n  \"absolutely\": {\n    clarity: true\n  },\n  \"surely\": {\n    clarity: true\n  },\n  //FALSE\n  \"no\": {\n    clarity: false\n  },\n  \"nope\": {\n    clarity: false\n  },\n  \"nah\": {\n    clarity: false\n  },\n  \"negative\": {\n    clarity: false\n  },\n  \"no indeed\": {\n    clarity: false\n  },\n  \"no thanks\": {\n    clarity: false\n  },\n  \"not at all\": {\n    clarity: false\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    hist: {\n      type: 'history',\n      history: \"deep\"\n    },\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"#root.dm.help\",\n          cond: context => context.recResult === 'help'\n        }, {\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }],\n        MAXSPEECH: [{\n          actions: assign(context => {\n            return {\n              counts: context.counts ? context.counts + 1 : 1\n            };\n          }),\n          cond: context => !context.counts || context.counts < 3,\n          target: \"timeoutnomatch\"\n        }, {\n          actions: assign(context => {\n            return {\n              counts: 0\n            };\n          }),\n          cond: context => context.counts >= 3,\n          target: \"init\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry Would you please tell me, who you are meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \".prompt\",\n          cond: context => context.recResult === 'help'\n        }, {\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\"\n        }],\n        MAXSPEECH: [{\n          actions: assign(context => {\n            return {\n              counts: context.counts ? context.counts + 1 : 1\n            };\n          }),\n          cond: context => !context.counts || context.counts < 3,\n          target: \"timeoutnomatch\"\n        }, {\n          actions: assign(context => {\n            return {\n              counts: 0\n            };\n          }),\n          cond: context => context.counts >= 3,\n          target: \"init\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry Would you please indicate a suitable day ? \"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \".prompt\",\n          cond: context => context.recResult === 'help'\n        }, {\n          cond: context => BooleanGrammar[context.recResult].clarity === true,\n          actions: assign(context => {\n            return {\n              clarity: BooleanGrammar[context.recResult].clarity\n            };\n          }),\n          target: \"wholeday_is_confirmed\"\n        }, {\n          cond: context => BooleanGrammar[context.recResult].clarity === false,\n          actions: assign(context => {\n            return {\n              clarity: BooleanGrammar[context.recResult].clarity\n            };\n          }),\n          target: \"Determination_time\"\n        }, {\n          target: \".nomatch\"\n        }],\n        MAXSPEECH: [{\n          actions: assign(context => {\n            return {\n              counts: context.counts ? context.counts + 1 : 1\n            };\n          }),\n          cond: context => !context.counts || context.counts < 3,\n          target: \"timeoutnomatch\"\n        }, {\n          actions: assign(context => {\n            return {\n              counts: 0\n            };\n          }),\n          cond: context => context.counts >= 3,\n          target: \"init\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I didn't catch what you said, would you please say that Will it take the whole day? \"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    wholeday_is_confirmed: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \".prompt\",\n          cond: context => context.recResult === 'help'\n        }, {\n          cond: context => BooleanGrammar[context.recResult].clarity === true,\n          actions: assign(context => {\n            return {\n              clarity: BooleanGrammar[context.recResult].clarity\n            };\n          }),\n          target: \"create_appointment\"\n        }, {\n          cond: context => BooleanGrammar[context.recResult].clarity === false,\n          actions: assign(context => {\n            return {\n              clarity: BooleanGrammar[context.recResult].clarity\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }],\n        MAXSPEECH: [{\n          actions: assign(context => {\n            return {\n              counts: context.counts ? context.counts + 1 : 1\n            };\n          }),\n          cond: context => !context.counts || context.counts < 3,\n          target: \"timeoutnomatch\"\n        }, {\n          actions: assign(context => {\n            return {\n              counts: 0\n            };\n          }),\n          cond: context => context.counts >= 3,\n          target: \"init\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Sorry,could you please tell me thet, Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    Determination_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \".prompt\",\n          cond: context => context.recResult === 'help'\n        }, {\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"confirm_time\"\n        }, {\n          target: \".nomatch\"\n        }],\n        MAXSPEECH: [{\n          actions: assign(context => {\n            return {\n              counts: context.counts ? context.counts + 1 : 1\n            };\n          }),\n          cond: context => !context.counts || context.counts < 3,\n          target: \"timeoutnomatch\"\n        }, {\n          actions: assign(context => {\n            return {\n              counts: 0\n            };\n          }),\n          cond: context => context.counts >= 3,\n          target: \"init\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Ok. The meeting is not the whole day.What time is your meeting?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry Would you please indicate a suitable time ?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    confirm_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \".prompt\",\n          cond: context => context.recResult === 'help'\n        }, {\n          cond: context => BooleanGrammar[context.recResult].clarity === true,\n          actions: assign(context => {\n            return {\n              clarity: BooleanGrammar[context.recResult].clarity\n            };\n          }),\n          target: \"create_appointment\"\n        }, {\n          cond: context => BooleanGrammar[context.recResult].clarity === false,\n          actions: assign(context => {\n            return {\n              clarity: BooleanGrammar[context.recResult].clarity\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }],\n        MAXSPEECH: [{\n          actions: assign(context => {\n            return {\n              counts: context.counts ? context.counts + 1 : 1\n            };\n          }),\n          cond: context => !context.counts || context.counts < 3,\n          target: \"timeoutnomatch\"\n        }, {\n          actions: assign(context => {\n            return {\n              counts: 0\n            };\n          }),\n          cond: context => context.counts >= 3,\n          target: \"init\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \" ?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Sorry,would you please tell me, Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \" ?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    create_appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created\")\n        }\n      }\n    },\n    timeoutnomatch: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Sorry I could not get any answer,maybe we can talk later.have a nice day\")\n        }\n      }\n    },\n    help: {\n      entry: say(\"I will help you and go back\"),\n      on: {\n        ENDSPEECH: \"hist\"\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/Sarab/Downloads/Kamaneh-machine/src/dmAppointmentPlus.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","BooleanGrammar","clarity","dmMachine","initial","states","hist","history","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","target","cond","context","recResult","actions","MAXSPEECH","counts","ask","nomatch","wholeday","wholeday_is_confirmed","Determination_time","confirm_time","create_appointment","timeoutnomatch","help"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\nimport { dmMkapp } from \"./mkapp\";\r\n\r\n\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    //PERSON\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Olivia\": { person: \"Olivia Smith\" },\r\n    \"Daniel\": { person: \"Daniel Jones\" },\r\n    \"James\": { person: \"James Williams\" },\r\n    \"Mia\": { person: \"Mia Wilson\" },\r\n    \"Jack\": { person: \"Jack Evans\" },\r\n    \"Emily\": { person: \"Emily Thomas\" },\r\n    \r\n    //DAYS\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesda\" },\r\n    \"Tuesday\": { day: \"Tuesda\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n\r\n    //TIMES\r\n    \"at 1\": { time: \"01:00\" },\r\n    \"1\": { time: \"01:00\" },\r\n    \"at 2\": { time: \"02:00\" },\r\n    \"2\": { time: \"02:00\" },\r\n    \"at 3\": { time: \"03:00\" },\r\n    \"t3\": { time: \"03:00\" },\r\n    \"at 4\": { time: \"04:00\" },\r\n    \"4\": { time: \"04:00\" },\r\n    \"at 5\": { time: \"05:00\" },\r\n    \"5\": { time: \"05:00\" },\r\n    \"at 6\": { time: \"06:00\" },\r\n    \"6\": { time: \"06:00\" },\r\n    \"at 7\": { time: \"07:00\" },\r\n    \"7\": { time: \"07:00\" },\r\n    \"at 8\": { time: \"08:00\" },\r\n    \"8\": { time: \"08:00\" },\r\n    \"at 9\": { time: \"09:00\" },\r\n    \"9\": { time: \"09:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"12\": { time: \"12:00\" }\r\n}\r\n\r\nconst BooleanGrammar: { [index: string]: { clarity?: boolean } } = {\r\n    //TRUE\r\n    \"yes\": { clarity: true },\r\n    \"of course\": { clarity: true },\r\n    \"alright\": { clarity: true },\r\n    \"very well\": { clarity: true },\r\n    \"sure\": { clarity: true },\r\n    \"agreed\": { clarity: true },\r\n    \"absolutely\": { clarity: true },\r\n    \"surely\": { clarity: true },\r\n    //FALSE\r\n    \"no\": { clarity: false },\r\n    \"nope\": { clarity: false },\r\n    \"nah\": { clarity: false },\r\n    \"negative\": { clarity: false },\r\n    \"no indeed\": { clarity: false },\r\n    \"no thanks\": { clarity: false },\r\n    \"not at all\": { clarity: false }\r\n\r\n}\r\n\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        hist: { type: 'history' , history : \"deep\"},\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [\r\n                    {target: \"#root.dm.help\",cond: (context) => context.recResult === 'help'},\r\n                    {cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"},\r\n                    { target: \".nomatch\"}],\r\n                MAXSPEECH: [\r\n                    {\r\n                        actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                        cond: (context) => !context.counts || context.counts < 3,\r\n                        target: \"timeoutnomatch\"\r\n                    },  \r\n                    {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                    }\r\n                ]\r\n            },   \r\n                \r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry Would you please tell me, who you are meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                }\r\n\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [\r\n                    {target: \".prompt\",cond: (context) => context.recResult === 'help'},\r\n                    {cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"wholeday\"},\r\n                    { target: \".nomatch\" }],\r\n\r\n                MAXSPEECH: [\r\n                    {\r\n                        actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                        cond: (context) => !context.counts || context.counts < 3,\r\n                        target: \"timeoutnomatch\"\r\n                    },  \r\n                    {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry Would you please indicate a suitable day ? \"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        wholeday: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [\r\n                    {target: \".prompt\",cond: (context) => context.recResult === 'help'},\r\n                {\r\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === true,\r\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                    target: \"wholeday_is_confirmed\"\r\n\r\n                },\r\n                {\r\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === false,\r\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                    target: \"Determination_time\"\r\n\r\n                },\r\n                { target: \".nomatch\" }],\r\n                MAXSPEECH: [\r\n                    {\r\n                        actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                        cond: (context) => !context.counts || context.counts < 3,\r\n                        target: \"timeoutnomatch\"\r\n                    },  \r\n                    {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.day}. Will it take the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't catch what you said, would you please say that Will it take the whole day? \"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        wholeday_is_confirmed: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [  {target: \".prompt\",cond: (context) => context.recResult === 'help'},\r\n                {\r\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === true,\r\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                    target: \"create_appointment\"\r\n\r\n                },\r\n                {\r\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === false,\r\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                    target: \"who\"\r\n\r\n                },\r\n                { target: \".nomatch\" }],\r\n                MAXSPEECH: [\r\n                    {\r\n                        actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                        cond: (context) => !context.counts || context.counts < 3,\r\n                        target: \"timeoutnomatch\"\r\n                    },  \r\n                    {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Sorry,could you please tell me thet, Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                }\r\n            }\r\n        },\r\n\r\n        Determination_time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [ \r\n                    {target: \".prompt\",cond: (context) => context.recResult === 'help'},\r\n                {\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"confirm_time\"\r\n\r\n                },\r\n                { target: \".nomatch\" }],\r\n                MAXSPEECH: [\r\n                    {\r\n                        actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                        cond: (context) => !context.counts || context.counts < 3,\r\n                        target: \"timeoutnomatch\"\r\n                    },  \r\n                    {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                    }\r\n                ]\r\n                \r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Ok. The meeting is not the whole day.What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry Would you please indicate a suitable time ?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                }\r\n            }\r\n        },\r\n\r\n        confirm_time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [  {target: \".prompt\",cond: (context) => context.recResult === 'help'},\r\n                {\r\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === true,\r\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                    target: \"create_appointment\"\r\n\r\n                },\r\n                {\r\n                    cond: (context) => BooleanGrammar[context.recResult].clarity === false,\r\n                    actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                    target: \"who\"\r\n\r\n                },\r\n                { target: \".nomatch\" }],\r\n                MAXSPEECH: [\r\n                    {\r\n                        actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                        cond: (context) => !context.counts || context.counts < 3,\r\n                        target: \"timeoutnomatch\"\r\n                    },  \r\n                    {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Sorry,would you please tell me, Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                   \r\n                }\r\n            }\r\n        },\r\n\r\n        create_appointment: {\r\n            initial: \"prompt\",\r\n            on: { \r\n                ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created\") }\r\n            }\r\n        },\r\n        timeoutnomatch: {\r\n            initial: \"prompt\",\r\n            on: { \r\n                ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Sorry I could not get any answer,maybe we can talk later.have a nice day\") }\r\n            },\r\n\r\n        },\r\n\r\n        help: {\r\n            entry: say(\"I will help you and go back\"),\r\n            on: { ENDSPEECH: \"hist\" }\r\n        }\r\n    \r\n    },\r\n})\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n            \r\n\r\n"]},"metadata":{},"sourceType":"module"}