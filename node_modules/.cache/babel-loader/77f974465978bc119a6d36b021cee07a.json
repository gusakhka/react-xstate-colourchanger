{"ast":null,"code":"import _objectSpread from \"/Users/Sarab/Downloads/Kamaneh-machine/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { dmMachine, say } from \"./dmAppointmentPlus\";\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\n;\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://mkappointment.herokuapp.com/model/parse';\nexport const nluRequest = text => fetch(new Request(proxyUrl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\nexport const dmMkapp = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: 'invok_guery',\n          actions: assign(context => {\n            return {\n              statement: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"What would you prefer to do now?\")),\n    invok_guery: {\n      invoke: {\n        id: 'decide',\n        src: (context, event) => nluRequest(context.statement),\n        onDone: {\n          target: 'select',\n          actions: [assign((context, event) => {\n            return {\n              rasa_finder: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    select: {\n      entry: send('RECOGNISED'),\n      on: {\n        RECOGNISED: [{\n          target: 'appointment',\n          cond: context => context.rasa_finder === \"appointment\"\n        }, {\n          target: 'timer',\n          cond: context => context.rasa_finder === \"timer\"\n        }, {\n          target: 'TODO_item',\n          cond: context => context.rasa_finder === \"TODO_item\"\n        }]\n      }\n    },\n    appointment: _objectSpread({}, dmMachine),\n    TODO_item: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: say(\"let's add the item to todo list.\")\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: say(\"So you need a timer,let me update it for you.\")\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/Sarab/Downloads/Kamaneh-machine/src/mkapp.ts"],"names":["send","assign","dmMachine","say","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","proxyUrl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","dmMkapp","init","CLICK","welcome","RECOGNISED","target","actions","context","statement","recResult","invok_guery","invoke","id","src","event","onDone","rasa_finder","intent","name","console","log","onError","select","cond","appointment","TODO_item","timer"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\nimport { dmMachine, say, listen } from \"./dmAppointmentPlus\";\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n\tinitial: 'prompt',\r\n\tstates: {\r\n            prompt: {\r\n\t\tentry: say(prompt),\r\n\t\ton: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n\t\tentry: send('LISTEN'),\r\n            },\r\n\t}})\r\n};\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://mkappointment.herokuapp.com/model/parse'\r\n\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyUrl+ rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nexport const dmMkapp: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }    \r\n        },\r\n\twelcome: {\r\n\t    on: {\r\n\t\tRECOGNISED: {\r\n\t\t    target: 'invok_guery',\r\n\t\t    actions: assign((context) => { return { statement: context.recResult } }),\r\n            },\r\n        },\r\n\t    ...promptAndAsk(\"What would you prefer to do now?\")\r\n\t},\r\n\r\n\tinvok_guery: {\r\n\t    invoke: {\r\n\t\tid: 'decide',\r\n                src: (context, event) => nluRequest(context.statement),\r\n                onDone: {\r\n                    target: 'select',\r\n                    actions: [assign((context, event) => { return {rasa_finder: event.data.intent.name }}),\r\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n\t\tonError: {\r\n                    target: 'welcome',\r\n\t\t    actions: (context,event) => console.log(event.data)\r\n                }\r\n            }\r\n\t},\r\n    select: {\r\n\t    entry: send('RECOGNISED'),\r\n\t    on: {\r\n            RECOGNISED: [\r\n                { target: 'appointment', cond: (context) => context.rasa_finder === \"appointment\" },\r\n                { target: 'timer', cond: (context) => context.rasa_finder === \"timer\"},\r\n                { target: 'TODO_item', cond: (context) => context.rasa_finder === \"TODO_item\"},               \r\n            ]   \r\n        },\r\n\t},\r\n    appointment: {\r\n        ...dmMachine\r\n    },\r\n    TODO_item: {\r\n        initial: \"prompt\",\r\n        states: {\r\n            prompt: { entry: say(\"let's add the item to todo list.\") }\r\n        }\r\n    },\r\n    timer: {\r\n        initial: \"prompt\",\r\n        states: {\r\n            prompt: {entry: say(\"So you need a timer,let me update it for you.\") }\r\n        }} \r\n    }})\r\n"]},"metadata":{},"sourceType":"module"}