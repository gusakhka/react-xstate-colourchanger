{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { grammar } from \"./grammars/smart-command-grammar\";\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\n\nfunction getCommand(input) {\n  const gram = loadGrammar(grammar);\n  const prs = parse(input.split(/\\s+/), gram);\n  const result = prs.resultsForRule(gram.$root)[0];\n  console.log(result);\n  const output = result.object + \" \" + result.action;\n  return output;\n}\n\nconst commands = [\"turn off the light\", 'turn on the light', 'turn off the air conditioning', 'turn on the air conditioning', 'turn off the AC', 'turn on the AC', 'turn on the heat', 'turn off the heat', 'open the window', 'close the door', 'open the door', 'close the window'];\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"todo\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome it's nice to meet you\")\n        }\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => commands.includes(context.recResult),\n          actions: assign(context => {\n            return {\n              task: getCommand(context.recResult)\n            };\n          }),\n          target: \"doneit\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What can i do for you?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I can not do that\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    doneit: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"ok have a nice day\")\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/Sarab/Downloads/Kamaneh-machine/src/dmSmartHome.ts"],"names":["send","assign","grammar","loadGrammar","parse","say","text","_context","type","value","listen","getCommand","input","gram","prs","split","result","resultsForRule","$root","console","log","output","object","action","commands","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","todo","RECOGNISED","cond","context","includes","recResult","actions","task","target","ask","nomatch","doneit"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\nimport { dmMkapp } from \"./mkapp\";\r\nimport {grammar} from \"./grammars/smart-command-grammar\"\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport * as SRGS from './srgs'\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\nfunction getCommand(input:String) {\r\n    const gram = loadGrammar(grammar);\r\n    const prs = parse(input.split(/\\s+/), gram);\r\n    const result = prs.resultsForRule(gram.$root)[0];\r\n    console.log(result)\r\n    const output = result.object + \" \" + result.action\r\n    return output\r\n}\r\n\r\nconst commands = [\"turn off the light\",\r\n'turn on the light',\r\n'turn off the air conditioning',\r\n'turn on the air conditioning',\r\n'turn off the AC',\r\n'turn on the AC',\r\n'turn on the heat',\r\n'turn off the heat',\r\n'open the window',\r\n'close the door',\r\n'open the door',\r\n'close the window']\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"todo\" },\r\n            states: {\r\n                prompt: { entry: say(\"Welcome it's nice to meet you\") }\r\n            }\r\n        },\r\n        todo: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => commands.includes(context.recResult),\r\n                    actions: assign((context) => { return { task: getCommand(context.recResult) } }),\r\n                    target: \"doneit\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What can i do for you?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I can not do that\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            },\r\n        },\r\n        doneit: {\r\n            initial: \"prompt\",\r\n            on: { \r\n                ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry : say(\"ok have a nice day\"), \r\n                     \r\n                },\r\n            },\r\n        },\r\n    },   \r\n})               "]},"metadata":{},"sourceType":"module"}