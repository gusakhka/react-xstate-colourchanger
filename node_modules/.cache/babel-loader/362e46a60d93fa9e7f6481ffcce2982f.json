{"ast":null,"code":"import { send, assign } from \"xstate\";\nexport function say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\nexport function listen() {\n  return send('LISTEN');\n}\nconst grammar = {\n  //PERSON\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Olivia\": {\n    person: \"Olivia Smith\"\n  },\n  \"Daniel\": {\n    person: \"Daniel Jones\"\n  },\n  \"James\": {\n    person: \"James Williams\"\n  },\n  \"Mia\": {\n    person: \"Mia Wilson\"\n  },\n  \"Jack\": {\n    person: \"Jack Evans\"\n  },\n  \"Emily\": {\n    person: \"Emily Thomas\"\n  },\n  //DAYS\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesda\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesda\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  //TIMES\n  \"at 1\": {\n    time: \"01:00\"\n  },\n  \"1\": {\n    time: \"01:00\"\n  },\n  \"at 2\": {\n    time: \"02:00\"\n  },\n  \"2\": {\n    time: \"02:00\"\n  },\n  \"at 3\": {\n    time: \"03:00\"\n  },\n  \"t3\": {\n    time: \"03:00\"\n  },\n  \"at 4\": {\n    time: \"04:00\"\n  },\n  \"4\": {\n    time: \"04:00\"\n  },\n  \"at 5\": {\n    time: \"05:00\"\n  },\n  \"5\": {\n    time: \"05:00\"\n  },\n  \"at 6\": {\n    time: \"06:00\"\n  },\n  \"6\": {\n    time: \"06:00\"\n  },\n  \"at 7\": {\n    time: \"07:00\"\n  },\n  \"7\": {\n    time: \"07:00\"\n  },\n  \"at 8\": {\n    time: \"08:00\"\n  },\n  \"8\": {\n    time: \"08:00\"\n  },\n  \"at 9\": {\n    time: \"09:00\"\n  },\n  \"9\": {\n    time: \"09:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  }\n};\nconst BooleanGrammar = {\n  //TRUE\n  \"yes\": {\n    clarity: true\n  },\n  \"of course\": {\n    clarity: true\n  },\n  \"alright\": {\n    clarity: true\n  },\n  \"very well\": {\n    clarity: true\n  },\n  \"sure\": {\n    clarity: true\n  },\n  \"agreed\": {\n    clarity: true\n  },\n  \"absolutely\": {\n    clarity: true\n  },\n  \"surely\": {\n    clarity: true\n  },\n  //FALSE\n  \"no\": {\n    clarity: false\n  },\n  \"nope\": {\n    clarity: false\n  },\n  \"nah\": {\n    clarity: false\n  },\n  \"negative\": {\n    clarity: false\n  },\n  \"no indeed\": {\n    clarity: false\n  },\n  \"no thanks\": {\n    clarity: false\n  },\n  \"not at all\": {\n    clarity: false\n  }\n};\nexport const dmMachine = {\n  initial: 'begin',\n  id: \"appointment\",\n  states: {\n    begin: {\n      initial: \"init\",\n      states: {\n        hist: {\n          type: 'history',\n          history: deep\n        },\n        init: {\n          on: {\n            CLICK: 'welcome'\n          }\n        },\n        welcome: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"who\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Let's create an appointment\")\n            }\n          }\n        },\n        who: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: \"#root.dm.help\",\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              target: \"day\"\n            }, {\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              actions: assign(context => {\n                return {\n                  counts: context.counts ? context.counts + 1 : 1\n                };\n              }),\n              cond: context => !context.counts || context.counts < 3,\n              target: \"timeoutnomatch\"\n            }, {\n              actions: assign(context => {\n                return {\n                  counts: 0\n                };\n              }),\n              cond: context => context.counts >= 3,\n              target: \"init\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"Who are you meeting with?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry Would you please tell me, who you are meeting with?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: \"#root.dm.help\",\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }),\n              target: \"wholeday\"\n            }, {\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              actions: assign(context => {\n                return {\n                  counts: context.counts ? context.counts + 1 : 1\n                };\n              }),\n              cond: context => !context.counts || context.counts < 3,\n              target: \"timeoutnomatch\"\n            }, {\n              actions: assign(context => {\n                return {\n                  counts: 0\n                };\n              }),\n              cond: context => context.counts >= 3,\n              target: \"init\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry Would you please indicate a suitable day ? \"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        wholeday: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: \"#root.dm.help\",\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => BooleanGrammar[context.recResult].clarity === true,\n              actions: assign(context => {\n                return {\n                  clarity: BooleanGrammar[context.recResult].clarity\n                };\n              }),\n              target: \"wholeday_is_confirmed\"\n            }, {\n              cond: context => BooleanGrammar[context.recResult].clarity === false,\n              actions: assign(context => {\n                return {\n                  clarity: BooleanGrammar[context.recResult].clarity\n                };\n              }),\n              target: \"Determination_time\"\n            }, {\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              actions: assign(context => {\n                return {\n                  counts: context.counts ? context.counts + 1 : 1\n                };\n              }),\n              cond: context => !context.counts || context.counts < 3,\n              target: \"timeoutnomatch\"\n            }, {\n              actions: assign(context => {\n                return {\n                  counts: 0\n                };\n              }),\n              cond: context => context.counts >= 3,\n              target: \"init\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.day, \". Will it take the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry I didn't catch what you said, would you please say that Will it take the whole day? \"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        wholeday_is_confirmed: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: \"#root.dm.help\",\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => BooleanGrammar[context.recResult].clarity === true,\n              actions: assign(context => {\n                return {\n                  clarity: BooleanGrammar[context.recResult].clarity\n                };\n              }),\n              target: \"create_appointment\"\n            }, {\n              cond: context => BooleanGrammar[context.recResult].clarity === false,\n              actions: assign(context => {\n                return {\n                  clarity: BooleanGrammar[context.recResult].clarity\n                };\n              }),\n              target: \"who\"\n            }, {\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              actions: assign(context => {\n                return {\n                  counts: context.counts ? context.counts + 1 : 1\n                };\n              }),\n              cond: context => !context.counts || context.counts < 3,\n              target: \"timeoutnomatch\"\n            }, {\n              actions: assign(context => {\n                return {\n                  counts: 0\n                };\n              }),\n              cond: context => context.counts >= 3,\n              target: \"init\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Sorry,could you please tell me thet, Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        Determination_time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: \"#root.dm.help\",\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              target: \"confirm_time\"\n            }, {\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              actions: assign(context => {\n                return {\n                  counts: context.counts ? context.counts + 1 : 1\n                };\n              }),\n              cond: context => !context.counts || context.counts < 3,\n              target: \"timeoutnomatch\"\n            }, {\n              actions: assign(context => {\n                return {\n                  counts: 0\n                };\n              }),\n              cond: context => context.counts >= 3,\n              target: \"init\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"Ok. The meeting is not the whole day.What time is your meeting?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry Would you please indicate a suitable time ?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        confirm_time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: \"#root.dm.help\",\n              cond: context => context.recResult === 'help'\n            }, {\n              cond: context => BooleanGrammar[context.recResult].clarity === true,\n              actions: assign(context => {\n                return {\n                  clarity: BooleanGrammar[context.recResult].clarity\n                };\n              }),\n              target: \"create_appointment\"\n            }, {\n              cond: context => BooleanGrammar[context.recResult].clarity === false,\n              actions: assign(context => {\n                return {\n                  clarity: BooleanGrammar[context.recResult].clarity\n                };\n              }),\n              target: \"who\"\n            }, {\n              target: \".nomatch\"\n            }],\n            MAXSPEECH: [{\n              actions: assign(context => {\n                return {\n                  counts: context.counts ? context.counts + 1 : 1\n                };\n              }),\n              cond: context => !context.counts || context.counts < 3,\n              target: \"timeoutnomatch\"\n            }, {\n              actions: assign(context => {\n                return {\n                  counts: 0\n                };\n              }),\n              cond: context => context.counts >= 3,\n              target: \"init\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \" ?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Sorry,would you please tell me, Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \" ?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        create_appointment: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Your appointment has been created\")\n            }\n          }\n        },\n        timeoutnomatch: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Sorry I could not get any answer,maybe we can talk later.have a nice day\")\n            }\n          }\n        }\n      }\n    },\n    help: {\n      entry: say(\"I will help you and go back\"),\n      on: {\n        ENDSPEECH: \"begin.hist\"\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/Sarab/Downloads/Kamaneh-machine/src/dmAppointmentPlus.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","BooleanGrammar","clarity","dmMachine","initial","id","states","begin","hist","history","deep","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","target","cond","context","recResult","actions","MAXSPEECH","counts","ask","nomatch","wholeday","wholeday_is_confirmed","Determination_time","confirm_time","create_appointment","timeoutnomatch","help"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\nimport { dmMkapp } from \"./mkapp\";\r\n\r\n\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    //PERSON\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Olivia\": { person: \"Olivia Smith\" },\r\n    \"Daniel\": { person: \"Daniel Jones\" },\r\n    \"James\": { person: \"James Williams\" },\r\n    \"Mia\": { person: \"Mia Wilson\" },\r\n    \"Jack\": { person: \"Jack Evans\" },\r\n    \"Emily\": { person: \"Emily Thomas\" },\r\n    \r\n    //DAYS\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesda\" },\r\n    \"Tuesday\": { day: \"Tuesda\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n\r\n    //TIMES\r\n    \"at 1\": { time: \"01:00\" },\r\n    \"1\": { time: \"01:00\" },\r\n    \"at 2\": { time: \"02:00\" },\r\n    \"2\": { time: \"02:00\" },\r\n    \"at 3\": { time: \"03:00\" },\r\n    \"t3\": { time: \"03:00\" },\r\n    \"at 4\": { time: \"04:00\" },\r\n    \"4\": { time: \"04:00\" },\r\n    \"at 5\": { time: \"05:00\" },\r\n    \"5\": { time: \"05:00\" },\r\n    \"at 6\": { time: \"06:00\" },\r\n    \"6\": { time: \"06:00\" },\r\n    \"at 7\": { time: \"07:00\" },\r\n    \"7\": { time: \"07:00\" },\r\n    \"at 8\": { time: \"08:00\" },\r\n    \"8\": { time: \"08:00\" },\r\n    \"at 9\": { time: \"09:00\" },\r\n    \"9\": { time: \"09:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"12\": { time: \"12:00\" }\r\n}\r\n\r\nconst BooleanGrammar: { [index: string]: { clarity?: boolean } } = {\r\n    //TRUE\r\n    \"yes\": { clarity: true },\r\n    \"of course\": { clarity: true },\r\n    \"alright\": { clarity: true },\r\n    \"very well\": { clarity: true },\r\n    \"sure\": { clarity: true },\r\n    \"agreed\": { clarity: true },\r\n    \"absolutely\": { clarity: true },\r\n    \"surely\": { clarity: true },\r\n    //FALSE\r\n    \"no\": { clarity: false },\r\n    \"nope\": { clarity: false },\r\n    \"nah\": { clarity: false },\r\n    \"negative\": { clarity: false },\r\n    \"no indeed\": { clarity: false },\r\n    \"no thanks\": { clarity: false },\r\n    \"not at all\": { clarity: false }\r\n\r\n}\r\n\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'begin',\r\n    id: \"appointment\",\r\n    states: {\r\n        begin: {\r\n            initial: \"init\",\r\n            states: {\r\n                hist: { type: 'history', history: deep },\r\n                init: {\r\n                    on: {\r\n                        CLICK: 'welcome'\r\n                    }\r\n                },\r\n                welcome: {\r\n                    initial: \"prompt\",\r\n                    on: { ENDSPEECH: \"who\" },\r\n                    states: {\r\n                        prompt: { entry: say(\"Let's create an appointment\") }\r\n                    }\r\n                },\r\n                who: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {target: \"#root.dm.help\",cond: (context) => context.recResult === 'help'},\r\n                            {cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                            actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                            target: \"day\"},\r\n                            { target: \".nomatch\"}],\r\n                        MAXSPEECH: [\r\n                            {\r\n                                actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                                cond: (context) => !context.counts || context.counts < 3,\r\n                                target: \"timeoutnomatch\"\r\n                            },  \r\n                            {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                            }\r\n                        ]\r\n                    },   \r\n                        \r\n                    states: {\r\n                        prompt: {\r\n                            entry: say(\"Who are you meeting with?\"),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: listen()\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry Would you please tell me, who you are meeting with?\"),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        }\r\n\r\n                    }\r\n                },\r\n                day: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            { target: \"#root.dm.help\",cond: (context) => context.recResult === 'help'},\r\n                            {cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                            target: \"wholeday\"},\r\n                            { target: \".nomatch\" }],\r\n\r\n                        MAXSPEECH: [\r\n                            {\r\n                                actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                                cond: (context) => !context.counts || context.counts < 3,\r\n                                target: \"timeoutnomatch\"\r\n                            },  \r\n                            {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `OK. ${context.person}. On which day is your meeting?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: listen()\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry Would you please indicate a suitable day ? \"),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        }\r\n                    }\r\n                },\r\n\r\n\r\n                wholeday: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            { target: \"#root.dm.help\",cond: (context) => context.recResult === 'help'},\r\n                        {\r\n                            cond: (context) => BooleanGrammar[context.recResult].clarity === true,\r\n                            actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                            target: \"wholeday_is_confirmed\"\r\n\r\n                        },\r\n                        {\r\n                            cond: (context) => BooleanGrammar[context.recResult].clarity === false,\r\n                            actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                            target: \"Determination_time\"\r\n\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                        MAXSPEECH: [\r\n                            {\r\n                                actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                                cond: (context) => !context.counts || context.counts < 3,\r\n                                target: \"timeoutnomatch\"\r\n                            },  \r\n                            {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `OK. ${context.day}. Will it take the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: listen()\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry I didn't catch what you said, would you please say that Will it take the whole day? \"),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        }\r\n                    }\r\n                },\r\n\r\n\r\n                wholeday_is_confirmed: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{ target: \"#root.dm.help\",cond: (context) => context.recResult === 'help'},\r\n                        {\r\n                            cond: (context) => BooleanGrammar[context.recResult].clarity === true,\r\n                            actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                            target: \"create_appointment\"\r\n\r\n                        },\r\n                        {\r\n                            cond: (context) => BooleanGrammar[context.recResult].clarity === false,\r\n                            actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                            target: \"who\"\r\n\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                        MAXSPEECH: [\r\n                            {\r\n                                actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                                cond: (context) => !context.counts || context.counts < 3,\r\n                                target: \"timeoutnomatch\"\r\n                            },  \r\n                            {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: listen()\r\n                        },\r\n                        nomatch: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `Sorry,could you please tell me thet, Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                Determination_time: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [ \r\n                            { target: \"#root.dm.help\",cond: (context) => context.recResult === 'help'},\r\n                        {\r\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                            actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                            target: \"confirm_time\"\r\n\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                        MAXSPEECH: [\r\n                            {\r\n                                actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                                cond: (context) => !context.counts || context.counts < 3,\r\n                                target: \"timeoutnomatch\"\r\n                            },  \r\n                            {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                            }\r\n                        ]\r\n                        \r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: say(\"Ok. The meeting is not the whole day.What time is your meeting?\"),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: listen()\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry Would you please indicate a suitable time ?\"),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                confirm_time: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{ target: \"#root.dm.help\",cond: (context) => context.recResult === 'help'},\r\n                        {\r\n                            cond: (context) => BooleanGrammar[context.recResult].clarity === true,\r\n                            actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                            target: \"create_appointment\"\r\n\r\n                        },\r\n                        {\r\n                            cond: (context) => BooleanGrammar[context.recResult].clarity === false,\r\n                            actions: assign((context) => { return { clarity: BooleanGrammar[context.recResult].clarity } }),\r\n                            target: \"who\"\r\n\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                        MAXSPEECH: [\r\n                            {\r\n                                actions: assign((context) => { return { counts: context.counts ? context.counts+1 : 1 } }),\r\n                                cond: (context) => !context.counts || context.counts < 3,\r\n                                target: \"timeoutnomatch\"\r\n                            },  \r\n                            {   actions: assign((context) => { return { counts: 0 } }),cond: (context) => context.counts >= 3,target: \"init\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: listen()\r\n                        },\r\n                        nomatch: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `Sorry,would you please tell me, Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        \r\n                        }\r\n                    }\r\n                },\r\n\r\n                create_appointment: {\r\n                    initial: \"prompt\",\r\n                    on: { \r\n                        ENDSPEECH: \"init\" },\r\n                    states: {\r\n                        prompt: { entry: say(\"Your appointment has been created\") }\r\n                    }\r\n                },\r\n                timeoutnomatch: {\r\n                    initial: \"prompt\",\r\n                    on: { \r\n                        ENDSPEECH: \"init\" },\r\n                    states: {\r\n                        prompt: { entry: say(\"Sorry I could not get any answer,maybe we can talk later.have a nice day\") }\r\n                    },\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        help: {\r\n            entry: say(\"I will help you and go back\"),\r\n            on: { ENDSPEECH: \"begin.hist\" }\r\n        }\r\n    \r\n    },\r\n})\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n            \r\n\r\n"]},"metadata":{},"sourceType":"module"}